# nginx/conf.d/api-gateway.conf
# HTTP/S 가상 호스트

map $http_upgrade $connection_upgrade { default upgrade; '' close; }

# API 게이트웨이 (경로 기반)
server {
    listen 80;
    server_name api.redfin.dev;
    return 301 https://$host$request_uri;
}
server {
    server_name api.redfin.dev;

    ssl_certificate     /etc/nginx/certs/redfin.dev.pem;
    ssl_certificate_key /etc/nginx/certs/redfin.dev.key.pem;
    listen 443 ssl;
    http2 on;

    client_max_body_size 50m;
    proxy_read_timeout   300s;
    proxy_send_timeout   300s;
    proxy_connect_timeout 30s;
    proxy_http_version   1.1;
    gzip on;

    proxy_set_header Host              $host;
    proxy_set_header X-Real-IP         $remote_addr;
    proxy_set_header X-Forwarded-For   $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;

    location /api/news/   { proxy_pass http://host.docker.internal:8000/;  proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; }
    location /api/label/  { proxy_pass http://host.docker.internal:8010/;  proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; }
    location /api/rag/    { proxy_pass http://192.168.0.66:8030/;          proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; }
    location /api/airflow/{ proxy_pass http://host.docker.internal:18080/; proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade; }

    location = /healthz { return 200 "ok\n"; add_header Content-Type text/plain; }
}

# Kibana
server {
  listen 443 ssl http2;
  server_name kibana.redfin.dev;
  ssl_certificate     /etc/nginx/certs/redfin.dev.pem;
  ssl_certificate_key /etc/nginx/certs/redfin.dev.key.pem;

  proxy_read_timeout  300s;
  
  location / {
    proxy_pass http://kibana:5601;
    proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade;
  }
}

# Jenkins
server {
  listen 443 ssl http2;
  server_name jenkins.redfin.dev;

  ssl_certificate     /etc/nginx/certs/redfin.dev.pem;       # 또는 SAN 포함 cert
  ssl_certificate_key /etc/nginx/certs/redfin.dev.key.pem;   # 파일명은 보유한 cert에 맞추세요

  client_max_body_size 100m;
  proxy_read_timeout   3600;
  proxy_send_timeout   3600;
  proxy_buffering      off;
  proxy_http_version   1.1;

  # /, /jenkins → /jenkins/로 정규화
  location = /        { return 302 https://$host/jenkins/; }
  location = /jenkins { return 302 https://$host/jenkins/; }

  location /jenkins/ {
    proxy_pass http://jenkins:8080/jenkins/;

    # 핵심 헤더
    proxy_set_header Host               $host;           # ← 추가
    proxy_set_header X-Forwarded-Host   $host;
    proxy_set_header X-Forwarded-Proto  $scheme;
    proxy_set_header X-Forwarded-Port   443;
    proxy_set_header X-Forwarded-Prefix /jenkins;
    proxy_set_header X-Real-IP          $remote_addr;
    proxy_set_header X-Forwarded-For    $proxy_add_x_forwarded_for;

    # WebSocket/agent 콘솔 대비
    proxy_set_header Upgrade            $http_upgrade;
    proxy_set_header Connection         $connection_upgrade;

    proxy_redirect off;
    # 만약 302 Location이 http://jenkins:8080/jenkins/ 로 온다면 아래 한 줄 활성화
    # proxy_redirect http://jenkins:8080/jenkins/ https://$host/jenkins/;
  }
}


# Qdrant (선택: HTTP 게이트웨이)
server {
  listen 80;  server_name qdrant.redfin.dev; return 301 https://$host$request_uri;
}
server {
  server_name qdrant.redfin.dev;
  ssl_certificate     /etc/nginx/certs/redfin.dev.pem;
  ssl_certificate_key /etc/nginx/certs/redfin.dev.key.pem;
  listen 443 ssl;
  http2 on;

  proxy_read_timeout  300s;
  location / {
    proxy_pass http://qdrant:6333/;
    proxy_http_version 1.1;
    proxy_set_header Host $host; proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header Upgrade $http_upgrade; proxy_set_header Connection $connection_upgrade;
  }
}
